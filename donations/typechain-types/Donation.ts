/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";

export declare namespace Donation {
  export type DonationRecordStruct = {
    donor: AddressLike;
    amount: BigNumberish;
  };

  export type DonationRecordStructOutput = [donor: string, amount: bigint] & {
    donor: string;
    amount: bigint;
  };
}

export interface DonationInterface extends Interface {
  getFunction(nameOrSignature: "getDonations" | "getTotalDonations" | "owner" | "totalDonations" | "withdraw"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DonationReceived" | "Withdrawal"): EventFragment;

  encodeFunctionData(functionFragment: "getDonations", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTotalDonations", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDonations", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getDonations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTotalDonations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDonations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [donor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [donor: string, amount: bigint];
  export interface OutputObject {
    donor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Donation extends BaseContract {
  connect(runner?: ContractRunner | null): Donation;
  waitForDeployment(): Promise<this>;

  interface: DonationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  getDonations: TypedContractMethod<[], [Donation.DonationRecordStructOutput[]], "view">;

  getTotalDonations: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  totalDonations: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "getDonations"): TypedContractMethod<[], [Donation.DonationRecordStructOutput[]], "view">;
  getFunction(nameOrSignature: "getTotalDonations"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "totalDonations"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<DonationReceivedEvent.InputTuple, DonationReceivedEvent.OutputTuple, DonationReceivedEvent.OutputObject>;
  getEvent(key: "Withdrawal"): TypedContractEvent<WithdrawalEvent.InputTuple, WithdrawalEvent.OutputTuple, WithdrawalEvent.OutputObject>;

  filters: {
    "DonationReceived(address,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<DonationReceivedEvent.InputTuple, DonationReceivedEvent.OutputTuple, DonationReceivedEvent.OutputObject>;

    "Withdrawal(address,uint256)": TypedContractEvent<WithdrawalEvent.InputTuple, WithdrawalEvent.OutputTuple, WithdrawalEvent.OutputObject>;
    Withdrawal: TypedContractEvent<WithdrawalEvent.InputTuple, WithdrawalEvent.OutputTuple, WithdrawalEvent.OutputObject>;
  };
}
